import{_ as e,H as t,o as r,c,C as s,a as n,J as l,E as p,V as o}from"./chunks/framework.2ee15143.js";const X=JSON.parse('{"title":"二开说明","description":"","frontmatter":{},"headers":[],"relativePath":"back/guide/instruction.md","lastUpdated":1685971125000}'),D={name:"back/guide/instruction.md"},y=o("",3),F={class:"tip custom-block"},i=s("p",{class:"custom-block-title"},"建表规范",-1),B=o("",3),A={class:"tip custom-block"},E=s("p",{class:"custom-block-title"},"接口返回 Result",-1),u=o("",5),b={class:"tip custom-block"},d=s("p",{class:"custom-block-title"},"分页查询",-1),m=s("ul",null,[s("li",null,"1、参数中增加ReqPage"),s("li",null,"2、使用PageHelper.startPage进行分页启动"),s("li",null,"3、使用PageResult进行分页包装"),s("li",null,"4、最后进行Result结果包装返回")],-1),C=o("",2),h={class:"tip custom-block"},g=s("p",{class:"custom-block-title"},"接口权限",-1),_=o("",8),v={class:"tip custom-block"},f=s("p",{class:"custom-block-title"},"获取当前帐号、用户ID等",-1),q=o("",8),S={class:"tip custom-block"},k=s("p",{class:"custom-block-title"},"获取当前用户",-1),T=o("",7),R={class:"tip custom-block"},P=s("p",{class:"custom-block-title"},"通过工厂获取bean",-1),I=s("p",null,"什么时候会用到？如果你需要在静态方法中调用spring中的对象，可能需要用到这个。",-1),U=o("",3),w={class:"tip custom-block"},M=s("p",{class:"custom-block-title"},"调用外部http接口",-1),j=o("",4),x={class:"tip custom-block"},N=s("p",{class:"custom-block-title"},"新增web服务",-1),L=o("",2),V={class:"tip custom-block"},O=s("p",{class:"custom-block-title"},"@RequestHeader(RPCConstants.REQ_ORIGIN) String origin参数解析",-1),H=o("",17);function G(W,$,J,Q,z,Y){const a=t("font");return r(),c("div",null,[y,s("div",F,[i,s("p",null,[n("数据库建表建议添加下面"),l(a,{style:{color:"red"}},{default:p(()=>[n("缺省字段")]),_:1}),n("，因为框架中自动生成代码entity会继承BaseEntity对象，BaseEntity默认包含下面属性。")])]),B,s("div",A,[E,s("p",null,[n("接口返回结果用"),l(a,{style:{color:"red"}},{default:p(()=>[n("Result")]),_:1}),n("包装，前端会分析Result返回code，进行相应的结果提示")])]),u,s("div",b,[d,s("p",null,[n("分页查询结果用"),l(a,{style:{color:"red"}},{default:p(()=>[n("Result，PageResult")]),_:1}),n("包装")]),m]),C,s("div",h,[g,s("p",null,[n("需要控制权限的接口可以通过在接口上面增加注解"),l(a,{style:{color:"red"}},{default:p(()=>[n("@RequiresPermissions")]),_:1}),n("来自动拦截校验")])]),_,s("div",v,[f,s("p",null,[n("可以通过"),l(a,{style:{color:"red"}},{default:p(()=>[n("AuthInfoUtils")]),_:1}),n("获取当前帐号、用户ID、Token、判断是否超户等")])]),q,s("div",S,[k,s("p",null,[n("可以通过"),l(a,{style:{color:"red"}},{default:p(()=>[n("OauthUtils")]),_:1}),n("获取当前用户信息、角色、权限等")])]),T,s("div",R,[P,s("p",null,[n("可以通过"),l(a,{style:{color:"red"}},{default:p(()=>[n("SpringBeanFactory")]),_:1}),n("获取SpringBean进行对象创建")]),I]),U,s("div",w,[M,s("p",null,[n("可以通过"),l(a,{style:{color:"red"}},{default:p(()=>[n("OkHttpUtils")]),_:1}),n("调用外部http接口，提供了GET,POST,UPLOAD方法，支持HTTPS")])]),j,s("div",x,[N,s("p",null,[n("建议在"),l(a,{style:{color:"red"}},{default:p(()=>[n("mf-business")]),_:1}),n("模块下新建自己的业务模块，参考mf-web")])]),L,s("p",null,[n("在"),l(a,{style:{color:"red"}},{default:p(()=>[n("mf-api")]),_:1}),n("模块中增加对应的api模块，增加对应的Feign调用接口和失败处理逻辑。")]),s("div",V,[O,s("p",null,[n("该参数标识接口是否内部调用，某些内部接口通过"),l(a,{style:{color:"red"}},{default:p(()=>[n("@InnerUser")]),_:1}),n("标识后，可以限制只允许内部服务访问，防止外部服务通过http接口直接访问。")])]),H])}const Z=e(D,[["render",G]]);export{X as __pageData,Z as default};
